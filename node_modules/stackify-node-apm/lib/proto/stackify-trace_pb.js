// source: proto/stackify-trace.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.stackify.Trace', null, global);
goog.exportSymbol('proto.stackify.TraceException', null, global);
goog.exportSymbol('proto.stackify.TraceExceptionFrame', null, global);
goog.exportSymbol('proto.stackify.TraceFrame', null, global);
goog.exportSymbol('proto.stackify.Traces', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stackify.Traces = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stackify.Traces.repeatedFields_, null);
};
goog.inherits(proto.stackify.Traces, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stackify.Traces.displayName = 'proto.stackify.Traces';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stackify.Trace = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stackify.Trace, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stackify.Trace.displayName = 'proto.stackify.Trace';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stackify.TraceFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stackify.TraceFrame.repeatedFields_, null);
};
goog.inherits(proto.stackify.TraceFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stackify.TraceFrame.displayName = 'proto.stackify.TraceFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stackify.TraceException = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.stackify.TraceException.repeatedFields_, null);
};
goog.inherits(proto.stackify.TraceException, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stackify.TraceException.displayName = 'proto.stackify.TraceException';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.stackify.TraceExceptionFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.stackify.TraceExceptionFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.stackify.TraceExceptionFrame.displayName = 'proto.stackify.TraceExceptionFrame';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stackify.Traces.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stackify.Traces.prototype.toObject = function(opt_includeInstance) {
  return proto.stackify.Traces.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stackify.Traces} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.Traces.toObject = function(includeInstance, msg) {
  var f, obj = {
    tracesList: jspb.Message.toObjectList(msg.getTracesList(),
    proto.stackify.Trace.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stackify.Traces}
 */
proto.stackify.Traces.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stackify.Traces;
  return proto.stackify.Traces.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stackify.Traces} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stackify.Traces}
 */
proto.stackify.Traces.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.stackify.Trace;
      reader.readMessage(value,proto.stackify.Trace.deserializeBinaryFromReader);
      msg.addTraces(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stackify.Traces.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stackify.Traces.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stackify.Traces} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.Traces.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTracesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.stackify.Trace.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Trace traces = 1;
 * @return {!Array<!proto.stackify.Trace>}
 */
proto.stackify.Traces.prototype.getTracesList = function() {
  return /** @type{!Array<!proto.stackify.Trace>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stackify.Trace, 1));
};


/** @param {!Array<!proto.stackify.Trace>} value */
proto.stackify.Traces.prototype.setTracesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.stackify.Trace=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stackify.Trace}
 */
proto.stackify.Traces.prototype.addTraces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.stackify.Trace, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.stackify.Traces.prototype.clearTracesList = function() {
  this.setTracesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stackify.Trace.prototype.toObject = function(opt_includeInstance) {
  return proto.stackify.Trace.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stackify.Trace} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.Trace.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: (f = msg.getFrame()) && proto.stackify.TraceFrame.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stackify.Trace}
 */
proto.stackify.Trace.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stackify.Trace;
  return proto.stackify.Trace.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stackify.Trace} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stackify.Trace}
 */
proto.stackify.Trace.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.stackify.TraceFrame;
      reader.readMessage(value,proto.stackify.TraceFrame.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stackify.Trace.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stackify.Trace.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stackify.Trace} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.Trace.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.stackify.TraceFrame.serializeBinaryToWriter
    );
  }
};


/**
 * optional TraceFrame frame = 1;
 * @return {?proto.stackify.TraceFrame}
 */
proto.stackify.Trace.prototype.getFrame = function() {
  return /** @type{?proto.stackify.TraceFrame} */ (
    jspb.Message.getWrapperField(this, proto.stackify.TraceFrame, 1));
};


/** @param {?proto.stackify.TraceFrame|undefined} value */
proto.stackify.Trace.prototype.setFrame = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.stackify.Trace.prototype.clearFrame = function() {
  this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.stackify.Trace.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stackify.TraceFrame.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stackify.TraceFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.stackify.TraceFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stackify.TraceFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.TraceFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    call: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startTimestampMillis: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    endTimestampMillis: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, undefined) : [],
    framesList: jspb.Message.toObjectList(msg.getFramesList(),
    proto.stackify.TraceFrame.toObject, includeInstance),
    exceptionsList: jspb.Message.toObjectList(msg.getExceptionsList(),
    proto.stackify.TraceException.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stackify.TraceFrame}
 */
proto.stackify.TraceFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stackify.TraceFrame;
  return proto.stackify.TraceFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stackify.TraceFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stackify.TraceFrame}
 */
proto.stackify.TraceFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCall(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTimestampMillis(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndTimestampMillis(value);
      break;
    case 4:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 5:
      var value = new proto.stackify.TraceFrame;
      reader.readMessage(value,proto.stackify.TraceFrame.deserializeBinaryFromReader);
      msg.addFrames(value);
      break;
    case 6:
      var value = new proto.stackify.TraceException;
      reader.readMessage(value,proto.stackify.TraceException.deserializeBinaryFromReader);
      msg.addExceptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stackify.TraceFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stackify.TraceFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stackify.TraceFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.TraceFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCall();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartTimestampMillis();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getEndTimestampMillis();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getFramesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.stackify.TraceFrame.serializeBinaryToWriter
    );
  }
  f = message.getExceptionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.stackify.TraceException.serializeBinaryToWriter
    );
  }
};


/**
 * optional string call = 1;
 * @return {string}
 */
proto.stackify.TraceFrame.prototype.getCall = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stackify.TraceFrame.prototype.setCall = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double start_timestamp_millis = 2;
 * @return {number}
 */
proto.stackify.TraceFrame.prototype.getStartTimestampMillis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.stackify.TraceFrame.prototype.setStartTimestampMillis = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double end_timestamp_millis = 3;
 * @return {number}
 */
proto.stackify.TraceFrame.prototype.getEndTimestampMillis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.stackify.TraceFrame.prototype.setEndTimestampMillis = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * map<string, string> properties = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.stackify.TraceFrame.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.stackify.TraceFrame.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
};


/**
 * repeated TraceFrame frames = 5;
 * @return {!Array<!proto.stackify.TraceFrame>}
 */
proto.stackify.TraceFrame.prototype.getFramesList = function() {
  return /** @type{!Array<!proto.stackify.TraceFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stackify.TraceFrame, 5));
};


/** @param {!Array<!proto.stackify.TraceFrame>} value */
proto.stackify.TraceFrame.prototype.setFramesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.stackify.TraceFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stackify.TraceFrame}
 */
proto.stackify.TraceFrame.prototype.addFrames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.stackify.TraceFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.stackify.TraceFrame.prototype.clearFramesList = function() {
  this.setFramesList([]);
};


/**
 * repeated TraceException exceptions = 6;
 * @return {!Array<!proto.stackify.TraceException>}
 */
proto.stackify.TraceFrame.prototype.getExceptionsList = function() {
  return /** @type{!Array<!proto.stackify.TraceException>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stackify.TraceException, 6));
};


/** @param {!Array<!proto.stackify.TraceException>} value */
proto.stackify.TraceFrame.prototype.setExceptionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.stackify.TraceException=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stackify.TraceException}
 */
proto.stackify.TraceFrame.prototype.addExceptions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.stackify.TraceException, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.stackify.TraceFrame.prototype.clearExceptionsList = function() {
  this.setExceptionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.stackify.TraceException.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stackify.TraceException.prototype.toObject = function(opt_includeInstance) {
  return proto.stackify.TraceException.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stackify.TraceException} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.TraceException.toObject = function(includeInstance, msg) {
  var f, obj = {
    caughtBy: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exception: jspb.Message.getFieldWithDefault(msg, 2, ""),
    message: jspb.Message.getFieldWithDefault(msg, 3, ""),
    timestampMillis: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    framesList: jspb.Message.toObjectList(msg.getFramesList(),
    proto.stackify.TraceExceptionFrame.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stackify.TraceException}
 */
proto.stackify.TraceException.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stackify.TraceException;
  return proto.stackify.TraceException.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stackify.TraceException} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stackify.TraceException}
 */
proto.stackify.TraceException.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaughtBy(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setException(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTimestampMillis(value);
      break;
    case 5:
      var value = new proto.stackify.TraceExceptionFrame;
      reader.readMessage(value,proto.stackify.TraceExceptionFrame.deserializeBinaryFromReader);
      msg.addFrames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stackify.TraceException.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stackify.TraceException.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stackify.TraceException} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.TraceException.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCaughtBy();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getException();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTimestampMillis();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getFramesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.stackify.TraceExceptionFrame.serializeBinaryToWriter
    );
  }
};


/**
 * optional string caught_by = 1;
 * @return {string}
 */
proto.stackify.TraceException.prototype.getCaughtBy = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stackify.TraceException.prototype.setCaughtBy = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string exception = 2;
 * @return {string}
 */
proto.stackify.TraceException.prototype.getException = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.stackify.TraceException.prototype.setException = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.stackify.TraceException.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.stackify.TraceException.prototype.setMessage = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double timestamp_millis = 4;
 * @return {number}
 */
proto.stackify.TraceException.prototype.getTimestampMillis = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.stackify.TraceException.prototype.setTimestampMillis = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * repeated TraceExceptionFrame frames = 5;
 * @return {!Array<!proto.stackify.TraceExceptionFrame>}
 */
proto.stackify.TraceException.prototype.getFramesList = function() {
  return /** @type{!Array<!proto.stackify.TraceExceptionFrame>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.stackify.TraceExceptionFrame, 5));
};


/** @param {!Array<!proto.stackify.TraceExceptionFrame>} value */
proto.stackify.TraceException.prototype.setFramesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.stackify.TraceExceptionFrame=} opt_value
 * @param {number=} opt_index
 * @return {!proto.stackify.TraceExceptionFrame}
 */
proto.stackify.TraceException.prototype.addFrames = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.stackify.TraceExceptionFrame, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.stackify.TraceException.prototype.clearFramesList = function() {
  this.setFramesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.stackify.TraceExceptionFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.stackify.TraceExceptionFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.stackify.TraceExceptionFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.TraceExceptionFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.stackify.TraceExceptionFrame}
 */
proto.stackify.TraceExceptionFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.stackify.TraceExceptionFrame;
  return proto.stackify.TraceExceptionFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.stackify.TraceExceptionFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.stackify.TraceExceptionFrame}
 */
proto.stackify.TraceExceptionFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.stackify.TraceExceptionFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.stackify.TraceExceptionFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.stackify.TraceExceptionFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.stackify.TraceExceptionFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.stackify.TraceExceptionFrame.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.stackify.TraceExceptionFrame.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.stackify);
