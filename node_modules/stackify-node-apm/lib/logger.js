'use strict'

const os = require('os')
const rfs = require('./dependencies/rfs')
const moment = require('moment')
const vsprintf = require('sprintf-js').vsprintf
const stringify = require('json-stringify-safe')
const fs = require('fs')
const Util = require('./util')
const common = require('./common')
const mkdirp = require('mkdirp')
const _hostname = os.hostname()
const _levels = {
  'DEBUG': 1,
  'INFO': 2,
  'WARN': 3,
  'ERROR': 4
}

/**
 * Simple file/console logger.
 * @constructor
 */
function Logger () {
  this._options = {}
  this._options.enabled = true
  this._console = false
  this._options.level = _levels['ERROR']
  this._applicationName = null
  this._directory = common.LOG_DEBUG_DIR
  this._folderCreated = null
  this._folderCreationError = null
  this._logBuffer = []
  this._streamError = null
  let error = null
  try {
    process.umask(0)
    if (!fs.existsSync(this._directory)) {
      this._folderCreated = false
      this.debug('Logger.constructor - Log folder does not exists! - Directory: %s', this._directory)
      this.makeLogDirectory()
    }
    this.loadLogFile()
  } catch (err) {
    error = err.message
  }

  if (error) {
    this.error('Logger.constructor - Log rotating file stream error - Directory: %s - Error: %s', this._directory, error.message)
  }
}

/**
 * Make Log directory folder
 */
Logger.prototype.makeLogDirectory = function makeLogDirectory () {
  try {
    if (!this._directory) {
      this.error('Logger.makeLogDirectory - Log folder is invalid.')
      return
    }
    mkdirp.sync(this._directory, {
      mode: 0o777
    })
    this._folderCreated = true
  } catch (err) {
    this._folderCreationError = err
    if (err.code === 'EACCES') {
      this.error('Logger.makeLogDirectory - Log folder creation error - Permission denied - Directory: %s - Error: %s', this._directory, err.message)
      return
    }
    this.error('Logger.makeLogDirectory - Log folder creation error - Directory: %s - Error: %s', this._directory, err.message)
  }
}

/**
 * Check if folder is created
 */
Logger.prototype.isFolderCreated = function isFolderCreated () {
  return this._folderCreated
}

/**
 * Get folder creation error
 */
Logger.prototype.getFolderCreationError = function getFolderCreationError () {
  return this._folderCreationError
}

/**
 * Load log rotating file stream
 */
Logger.prototype.loadLogFile = function loadLogFile () {
  if (this._debuggerStream) {
    throw new Error('Logger.initLogStream - Error: TraceLogger _stream is already set')
  }

  if (!this._directory) {
    throw new Error('TraceLogger.initLogStream - Error: TraceLogger _directory is invalid')
  }

  var makeGenerator = function makeGenerator (time, index) {
    return 'stackify-node-apm-' + _hostname + '-' + index + '.log'
  }

  try {
    this._debuggerStream = rfs.createStream(makeGenerator, {
      size: '50M',
      interval: '1d',
      immutable: true,
      path: this._directory,
      mode: 0o777
    })

    let self = this
    this._debuggerStream.on('error', function (err) {
      console.log('[Stackify Node APM] Logger._stream::on(error) - %s', err)
      self._debuggerStream = null // set _stream to null as its already dead
      self._streamError = err // Set stream error to avoid filling up the log buffer
      self._logBuffer = [] // clear the log buffer as its pointless to store nenw logs
    })

    this._debuggerStream.on('warning', function (err) {
      console.log('[Stackify Node APM] Logger._stream::on(warning) - %s', err)
    })
  } catch (error) {
    console.log('[Stackify Node APM] Logger._stream exception: ', error)
  }
}

Logger.prototype.debug = function debug (msg) {
  if (this._options.level <= _levels['DEBUG']) {
    this._write('DEBUG', msg, arguments)
  }
}

Logger.prototype.info = function info (msg) {
  if (this._options.level <= _levels['INFO']) {
    this._write('INFO', msg, arguments)
  }
}

Logger.prototype.warn = function warn (msg) {
  if (this._options.level <= _levels['WARN']) {
    this._write('WARN', msg, arguments)
  }
}

Logger.prototype.error = function error (msg) {
  if (this._options.level <= _levels['ERROR']) {
    this._write('ERROR', msg, arguments)
  }
}

Logger.prototype._write = function _write (level, msg, args) {
  if (level && msg) {
    let prefix = moment.utc().format('YYYY-MM-DD HH:mm:ss,SSS') + ' ' + level + ' [Stackify] ' + (this._applicationName ? '[' + this._applicationName + '] - ' : '')
    let formattedArgs = Array.prototype.slice.call(args, 1)
    for (let i = 0; i < formattedArgs.length; i++) {
      if (formattedArgs[i] && (typeof formattedArgs[i] === 'object')) {
        formattedArgs[i] = stringify(formattedArgs[i])
      }
    }
    let formattedMsg = prefix + vsprintf(msg, formattedArgs)
    if (this._console) {
      if (level === 'ERROR') {
        console.error(formattedMsg)
      } else {
        console.log(formattedMsg)
      }
    }
    this.writeOnBuffer(formattedMsg + '\n')
  }
}

/**
 * Write on log buffer
 */
Logger.prototype.writeOnBuffer = function (msg) {
  if (this._debuggerStream && this._debuggerStream.stream && this._debuggerStream.stream.writable) {
    this.flushBuffer()
    this._debuggerStream.write(msg)
    return
  }

  if (this._streamError === null) {
    this._logBuffer.push(msg)
  }
}

/**
 * Flush log buffer on RFS stream
 */
Logger.prototype.flushBuffer = function () {
  if (this._logBuffer.length) {
    let self = this
    this._logBuffer.forEach(function (value, index) {
      self._debuggerStream.write(value)
    })
    this._logBuffer = []
  }
}

Logger.prototype.setApplicationName = function setApplicationName (applicationName) {
  this._applicationName = applicationName
}

Logger.prototype.getApplicationName = function getApplicationName () {
  return this._applicationName
}

/**
 * Set log console setting
 */
Logger.prototype.setConsole = function setConsole (console) {
  this._console = console
}

/**
 * Set log level for the logger
 * @param {String} level - log level
 */
Logger.prototype.setLogLevel = function setLogLevel (level) {
  if (!Util.isNumber(level)) {
    return
  }

  this._options.level = level
}

/**
 * Get log level of the logger
 * @returns {String} log level of the logger
 */
Logger.prototype.getLogLevel = function getLogLevel () {
  return this._options.level
}

/**
 * Get directory of the log file
 * @returns {string} - Location of the log file
 */
Logger.prototype.getDirectory = function getDirectory () {
  return this._directory
}

/**
 * Get directory of the log file
 * @param {string} directory - Location of the log file
 */
Logger.prototype.setDirectory = function setDirectory (directory) {
  this._directory = directory
}

module.exports = new Logger()
