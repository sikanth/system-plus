'use strict'

const path = require('path')
const fs = require('fs')
const URL = require('url')
const Logger = require('./logger')
const common = require('./common')
const Util = require('./util')
const semver = require('semver')
const process = require('process')

const DEFAULT_FILENAME = 'stackify.js'
const RUM_ASSET_URL_DEV = 'https://stckjs.azureedge.net/stckjs.dev.js' // eslint-disable-line
const RUM_ASSET_URL_QA = 'https://stckjs.azureedge.net/stckjs.qa.js' // eslint-disable-line
const RUM_ASSET_URL_MC = 'https://stckjs.azureedge.net/stckjs.mc.js' // eslint-disable-line
const RUM_ASSET_URL_PROD = 'https://stckjs.azureedge.net/stckjs.js' // eslint-disable-line

// places to look for configuration file (DEFAULT_FILENAME)
const CONFIG_FILE_LOCATIONS = [
  path.dirname(require.main.filename),
  process.cwd(),
  process.env.HOME,
  path.join(__dirname, '../../../..')
]

const PROPERTY_FILENAME = 'stackify.properties'
const PROPERTY_LOCATION =
  common.PLATFORM === 'win32'
    ? path.join(__dirname, '..')
    : '/usr/local/stackify/stackify-node-apm/'

/**
 * Profiler configuration.
 * @constructor
 */
function Config (platform) {
  this.applicationName = 'Node Application'
  this.environmentName = 'Production'
  this.clientId = null
  this.clientDeviceId = null
  this.customInstrumentations = null
  this.debugEnabled = false
  this.rumAssetUrl = RUM_ASSET_URL_PROD
  this.clientRumDomain = null
  this.rumEnabled = false
  this.prefixEnabled = false
  this.rumCookiePath = '/'
  this.rumCookieName = '.Stackify.Rum'
  this.transport = 'log'
  this.transport_http_hostname = 'localhost'
  this.transport_http_port = 10601
  this.agent_traces_url = '/traces'
  this.transport_http_endpoint = null
  this.max_retries = 6
  this.delay_seconds = 10 * 1000 // in milliseconds
  this.socket_path = '/usr/local/stackify/stackify.sock'
  this.queueEnabled = true
  this.debugDir = common.LOG_DEBUG_DIR
  this.traceLogDir = common.LOG_TRACES_DIR

  if (!Util.isUndefined(platform)) {
    this.setPlatform(platform)
  }

  this._setupConfiguration()
  this._setupProperties()

  Logger.info('Node version: %s', process.versions.node)
  Logger.info('Node Profiler version: %s', require('../package.json').version)
  Logger.info('Application Name: %s', this.applicationName)
  Logger.info('Environment Name: %s', this.environmentName)
  Logger.info('RUM enabled: %s', this.rumEnabled)
  Logger.info('Prefix enabled: %s', this.prefixEnabled)
  Logger.info('Queue enabled: %s', this.queueEnabled)
  Logger.info('Transport: %s', this.transport)
  Logger.info('Transport HTTP Endpoint: %s', this.getTransportHTTPEndpoint())
  Logger.info('Trace Log Directory: %s', path.normalize(this.traceLogDir))
  Logger.info('Debug Directory: %s', path.normalize(this.debugDir))
}

/**
 * Scans CONFIG_FILE_LOCATIONS returns 1st match that exists.
 * @return {string}
 * @private
 */
function _getStackifyConfigurationFile (fileLocation, fileName) {
  if (Util.isString(fileLocation)) {
    let filepath = path.join(path.resolve(fileLocation), Util.isString(fileName) ? fileName : DEFAULT_FILENAME)
    let fileRealpath

    Logger.info('Looking for configuration file: ' + filepath)
    if (fs.existsSync(filepath)) {
      fileRealpath = fs.realpathSync(filepath)
    } else {
      Logger.warn('Configuration file does not exist: %s', filepath)
    }

    if (fileRealpath) {
      return fileRealpath
    }
  }

  for (let i = 0; i < CONFIG_FILE_LOCATIONS.length; i++) {
    let configFile = CONFIG_FILE_LOCATIONS[i]

    if (!configFile) continue

    let filepath = path.join(path.resolve(configFile), DEFAULT_FILENAME)
    Logger.debug('Looking for configuration file: %s', filepath)
    if (!fs.existsSync(filepath)) continue

    return fs.realpathSync(filepath)
  }
}

/**
 * Loads configuration and sets app/env members.
 * @private
 */
Config.prototype._setupConfiguration = function (fileLocation, fileName) {
  let filepath = _getStackifyConfigurationFile(fileLocation, fileName)
  if (!filepath) {
    Logger.info('No Configuration File Found (%s).', DEFAULT_FILENAME)
  }

  // Set defaults
  this.applicationName = 'Node Application'
  this.environmentName = 'Production'
  this.customInstrumentations = null
  this.debugEnabled = false
  this.rumEnabled = true
  this.prefixEnabled = false
  this.queueEnabled = true
  this.transport_http_endpoint = 'https://localhost:10601'

  let userConfiguration
  if (filepath) {
    try {
      userConfiguration = require(filepath).config
    } catch (error) {
      Logger.error('Config._setupConfiguration - Unable to load config json file %s.', filepath, error)
    }
  }

  if (userConfiguration && userConfiguration.debug && Util.isBoolean(userConfiguration.debug)) {
    this.debugEnabled = userConfiguration.debug
    this.updateLogger()
  }

  let stackifyAppName = !Util.isUndefined(process.env['STACKIFY_APPLICATION_NAME']) && process.env['STACKIFY_APPLICATION_NAME']
    ? process.env['STACKIFY_APPLICATION_NAME'] : null

  if (stackifyAppName) {
    this.applicationName = process.env['STACKIFY_APPLICATION_NAME'].trim()
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_APPLICATION_NAME environment variable')
  } else if (userConfiguration && !Util.isUndefined(userConfiguration.application_name) && !Util.isStrEmpty(userConfiguration.application_name)) {
    this.applicationName = userConfiguration.application_name.trim()
  }
  if (userConfiguration) userConfiguration.application_name = this.applicationName

  let stackifyEnv = !Util.isUndefined(process.env['STACKIFY_ENVIRONMENT_NAME']) && process.env['STACKIFY_ENVIRONMENT_NAME']
    ? process.env['STACKIFY_ENVIRONMENT_NAME'] : null

  if (stackifyEnv) {
    this.environmentName = stackifyEnv.trim()
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_ENVIRONMENT_NAME environment variable')
  } else if (userConfiguration && !Util.isUndefined(userConfiguration.environment_name) && !Util.isStrEmpty(userConfiguration.environment_name)) {
    this.environmentName = userConfiguration.environment_name.trim()
  }
  if (userConfiguration) userConfiguration.environment_name = this.environmentName

  if (userConfiguration && userConfiguration.instrumentations && Util.isObject(userConfiguration.instrumentations)) {
    this.customInstrumentations = userConfiguration.instrumentations
  }

  let stackifyRum = !Util.isUndefined(process.env['STACKIFY_RUM']) && process.env['STACKIFY_RUM']
    ? process.env['STACKIFY_RUM'] : null

  if (stackifyRum) {
    this.rumEnabled = Boolean(JSON.parse(stackifyRum))
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_RUM environment variable')
  } else if (userConfiguration && userConfiguration.rum_enabled && Util.isBoolean(userConfiguration.rum_enabled)) {
    this.rumEnabled = userConfiguration.rum_enabled
  }
  if (userConfiguration) userConfiguration.rum_enabled = this.rumEnabled
  this.rumEnabled = Boolean(JSON.parse(this.rumEnabled))

  let prefixEnabled = !Util.isUndefined(process.env['STACKIFY_PREFIX_ENABLED']) && process.env['STACKIFY_PREFIX_ENABLED']
    ? process.env['STACKIFY_PREFIX_ENABLED'] : null

  if (prefixEnabled) {
    this.prefixEnabled = Boolean(JSON.parse(prefixEnabled))
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_PREFIX_ENABLED environment variable')
  } else if (userConfiguration && userConfiguration.prefix_enabled && Util.isBoolean(userConfiguration.prefix_enabled)) {
    this.prefixEnabled = userConfiguration.prefix_enabled
  }
  if (userConfiguration) userConfiguration.prefix_enabled = this.prefixEnabled
  this.prefixEnabled = Boolean(JSON.parse(this.prefixEnabled))

  // queue
  let stackifyQueue = !Util.isUndefined(process.env['STACKIFY_QUEUE']) && process.env['STACKIFY_QUEUE']
    ? process.env['STACKIFY_QUEUE'] : null
  if (stackifyQueue) {
    this.queueEnabled = stackifyQueue.trim()
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_QUEUE environment variable')
  } else if (userConfiguration && userConfiguration.queue_enabled && Util.isBoolean(userConfiguration.queue_enabled)) {
    this.queueEnabled = userConfiguration.queue_enabled
  }
  if (userConfiguration) userConfiguration.queue_enabled = this.queueEnabled
  this.queueEnabled = Boolean(JSON.parse(this.queueEnabled))

  let stackifyTransport = !Util.isUndefined(process.env['STACKIFY_TRANSPORT']) && process.env['STACKIFY_TRANSPORT']
    ? process.env['STACKIFY_TRANSPORT'] : null

  if (stackifyTransport) {
    this.transport = stackifyTransport.trim()
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_TRANSPORT environment variable')
  } else if (userConfiguration && !Util.isUndefined(userConfiguration.transport) && !Util.isStrEmpty(userConfiguration.transport)) {
    this.transport = userConfiguration.transport.trim().toLowerCase()
  }
  if (userConfiguration) userConfiguration.transport = this.transport

  let httpEndpoint = !Util.isUndefined(process.env['STACKIFY_TRANSPORT_HTTP_ENDPOINT']) && process.env['STACKIFY_TRANSPORT_HTTP_ENDPOINT']
    ? process.env['STACKIFY_TRANSPORT_HTTP_ENDPOINT'] : null

  if (httpEndpoint) {
    this.transport_http_endpoint = httpEndpoint.trim()
    this.setTransportHTTPEndpoint()
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_TRANSPORT_HTTP_ENDPOINT environment variable')
  } else if (userConfiguration && !Util.isUndefined(userConfiguration.transport_http_endpoint) && !Util.isStrEmpty(userConfiguration.transport_http_endpoint)) {
    this.transport_http_endpoint = userConfiguration.transport_http_endpoint.trim().toLowerCase()
    this.setTransportHTTPEndpoint()
  }
  if (userConfiguration) userConfiguration.transport_http_endpoint = this.transport_http_endpoint

  let transportSocketPath = !Util.isUndefined(process.env['STACKIFY_TRANSPORT_SOCKET_PATH']) && process.env['STACKIFY_TRANSPORT_SOCKET_PATH']
    ? process.env['STACKIFY_TRANSPORT_SOCKET_PATH'] : null

  if (transportSocketPath) {
    this.socket_path = process.env['STACKIFY_TRANSPORT_SOCKET_PATH'].trim()
    Logger.debug('Config._setupConfiguration() - Using STACKIFY_TRANSPORT_SOCKET_PATH environment variable')
  } else if (userConfiguration && !Util.isUndefined(userConfiguration.socket_path) && !Util.isStrEmpty(userConfiguration.socket_path)) {
    this.socket_path = userConfiguration.socket_path.trim()
  }
  if (userConfiguration) userConfiguration.socket_path = this.socket_path

  this._validate_config(userConfiguration)
}

Config.prototype._validate_config = function (userConfiguration) {
  if (userConfiguration && !Util.isUndefined(userConfiguration.application_name) && (Util.isStrEmpty(userConfiguration.application_name))) {
    Logger.error('Config._setupConfiguration(): application_name should not be empty and must be a String type.')
  }

  if (userConfiguration && !Util.isUndefined(userConfiguration.environment_name) && (Util.isStrEmpty(userConfiguration.environment_name))) {
    Logger.error('Config._setupConfiguration(): environment_name should not be empty and must be a String type.')
  }

  if (userConfiguration && !Util.isUndefined(userConfiguration.transport) && (Util.isStrEmpty(userConfiguration.transport))) {
    Logger.error('Config._setupConfiguration(): transport should not be empty and must be a String type.')
  }

  if (userConfiguration && userConfiguration.instrumentations && !Util.isObject(userConfiguration.instrumentations)) {
    Logger.error('Config._setupConfiguration(): instrumentations must be an Object type.')
  }

  if (userConfiguration && !Util.isUndefined(userConfiguration.rum_enabled) && Util.isBoolean(userConfiguration.rum_enabled) === false) {
    Logger.error('Config._setupConfiguration(): rum_enabled must be a Boolean type.')
  }

  if (userConfiguration && !Util.isUndefined(userConfiguration.prefix_enabled) && Util.isBoolean(userConfiguration.prefix_enabled) === false) {
    Logger.error('Config._setupConfiguration(): prefix_enabled must be a Boolean type.')
  }
}

/**
 * Load and setup stackify device properties.
 * @param fileLocation
 * @param fileName
 * @private
 */
Config.prototype._setupProperties = function setupProperties (fileLocation, fileName) {
  let stackifyProperties = this.getPlatform() === 'win32' ? _parseStackifyEnvProperties() : _readStackifyPropertyFile(fileLocation, fileName)

  // Reset config settings
  this.clientId = null
  this.clientDeviceId = null
  this.clientRumDomain = null

  if (!stackifyProperties) {
    return
  }

  if (stackifyProperties.clientId) {
    this.clientId = stackifyProperties.clientId
  }

  if (stackifyProperties.deviceId) {
    this.clientDeviceId = stackifyProperties.deviceId
  }

  if (stackifyProperties.clientRumDomain) {
    this.clientRumDomain = stackifyProperties.clientRumDomain
  }
}

/**
 * Returns Stackify Client ID
 * @return {numeric}
 */
Config.prototype.getClientId = function getClientId () {
  return this.clientId
}

/**
 * returns Stackify Device ID
 * @return {numeric}
 */
Config.prototype.getClientDeviceId = function getClientDeviceId () {
  return this.clientDeviceId
}

/**
 * Get user custom instrumentations
 * @returns {Array}
 */
Config.prototype.getCustomInstrumentations = function getClientDeviceId () {
  return this.customInstrumentations
}

/**
 * returns Stackify Client Rum URL
 * @return {String}
 */
Config.prototype.getClientRumDomain = function getClientRumDomain () {
  return this.clientRumDomain
}

Config.prototype.getApplicationName = function getApplicationName () {
  return this.applicationName
}

Config.prototype.getEnvironmentName = function getEnvironmentName () {
  return this.environmentName
}

Config.prototype.getTransportType = function getTransportType () {
  return this.transport
}

Config.prototype.getMaxRetries = function getMaxRetries () {
  return this.max_retries
}

Config.prototype.getDelaySeconds = function getDelaySeconds () {
  return this.delay_seconds
}

Config.prototype.getTransportHTTPEndpoint = function getTransportHTTPEndpoint () {
  return this.transport_http_hostname + ':' + this.transport_http_port + this.agent_traces_url
}

Config.prototype.setTransportHTTPEndpoint = function setTransportHTTPEndpoint () {
  var httpEndpoint = ''
  if (this.transport_http_endpoint) {
    if (semver.satisfies(process.version, '^8.0')) {
      var MyUrl = URL.URL
      httpEndpoint = new MyUrl(this.transport_http_endpoint)
    } else {
      httpEndpoint = URL.parse(this.transport_http_endpoint)
    }
    this.transport_http_hostname = httpEndpoint.hostname
    this.transport_http_port = httpEndpoint.port
  }
}

Config.prototype.isDebugEnabled = function isDebugEnabled () {
  return this.debugEnabled
}

Config.prototype.setDebug = function isDebugEnabled (debug) {
  if (!Util.isBoolean(debug)) {
    return
  }
  this.debugEnabled = debug
  this.updateLogger()
}

/**
 * Set the platform value
 * @param platform Current platform
 */
Config.prototype.setPlatform = function setPlatform (platform) {
  this._platform = platform
}

/**
 * Return current platform
 * @returns string
 */
Config.prototype.getPlatform = function getPlatform (platform) {
  return this._platform
}

const LogLevels = {
  'DEBUG': 1,
  'INFO': 2,
  'WARN': 3,
  'ERROR': 4
}

/**
 * Update log level of the logger
*/
Config.prototype.updateLogger = function updateLogger () {
  Logger.setLogLevel(this.debugEnabled ? LogLevels['DEBUG'] : LogLevels['ERROR'])
}

/**
 * Parsed StackifyEnv for property values
 * @return {*}
 * @private
 */
function _parseStackifyEnvProperties () {
  let clientId = null
  let deviceId = null
  let clientRumDomain = !Util.isUndefined(process.env['STACKIFY_RUM_DOMAIN']) && process.env['STACKIFY_RUM_DOMAIN']
    ? process.env['STACKIFY_RUM_DOMAIN'] : null

  if (Util.isString(clientRumDomain) && clientRumDomain === 'null') {
    clientRumDomain = null
  }

  let stackifyEnv = !Util.isUndefined(process.env['STACKIFY_ENV']) && process.env['STACKIFY_ENV'] ? process.env['STACKIFY_ENV'] : null
  if (stackifyEnv) {
    let parsedStackifyEnv = stackifyEnv.split('|')
    if (!Util.isUndefined(parsedStackifyEnv[0]) && parsedStackifyEnv[0].includes('C') !== false) {
      clientId = parsedStackifyEnv[0].split('C')[1]
    }
    if (!Util.isUndefined(parsedStackifyEnv[1]) && parsedStackifyEnv[1].includes('CD') !== false) {
      deviceId = parsedStackifyEnv[1].split('CD')[1]
    }
  }

  return {
    clientRumDomain: clientRumDomain,
    clientId: clientId,
    deviceId: deviceId
  }
}

/**
 * Reads passed in stackify properties file
 * @param fileLocation
 * @param fileName
 * @return {*}
 * @private
 */
function _readStackifyPropertyFile (fileLocation, fileName) {
  let filepath = path.join(path.resolve(fileLocation || PROPERTY_LOCATION), fileName || PROPERTY_FILENAME)
  let fileRealpath

  Logger.info('Loading properties file: ' + filepath)

  if (fs.existsSync(filepath)) {
    fileRealpath = fs.realpathSync(filepath)
  } else {
    Logger.warn('Properties file does not exist: %s', filepath)
  }

  if (fileRealpath) {
    try {
      return require('ini').parse(fs.readFileSync(fileRealpath, 'utf-8'))
    } catch (e) {
      Logger.warn('Error parsing properties file: %s', filepath, e)
    }
  }

  return null
}

module.exports = Config
