'use strict'

const sprintf = require('sprintf-js').sprintf
const Logger = require('../logger')

let tracer
let config
const INJECTION_CONTENT_TEMPLATE = '<script' +
        ' src="%s"' +
        ' data-host="%s"' +
        ' data-requestId="%s"' +
        ' data-a="%s"' +
        ' data-e="%s"' +
        ' data-enableInternalLogging="%s" async></script>'

function RumGenerator (_tracer) {
  tracer = _tracer
  config = tracer._config
  this._rumAssetUrl = null
  this.setRumAssetUrl(config.rumAssetUrl)
}

RumGenerator.prototype.getRumInjectionContent = function getRumInjectionContent () {
  let rumAssetUrl = this.getRumAssetUrl()
  let transaction = tracer.getActiveTransaction()
  let clientRumDomain = config.getClientRumDomain()

  if (!rumAssetUrl) {
    Logger.debug('RumGenerator.getRumInjectionContent - Failed to load rum asset url')
    return ''
  }

  if (!clientRumDomain) {
    Logger.debug('RumGenerator.getRumInjectionContent - No client rum url was set')
    return ''
  }

  if (!transaction) {
    Logger.debug('RumGenerator.getRumInjectionContent - There is no active transaction')
    return ''
  }

  return sprintf(
    INJECTION_CONTENT_TEMPLATE,
    rumAssetUrl,
    clientRumDomain,
    tracer.getStackifyId(transaction.id()),
    config.getApplicationName(),
    config.getEnvironmentName(),
    config.isDebugEnabled() ? 'true' : 'false'
  )
}

RumGenerator.prototype.getRumAssetUrl = function getRumAssetUrl () {
  return this._rumAssetUrl
}

RumGenerator.prototype.setRumAssetUrl = function setRumAssetUrl (assetUrl) {
  this._rumAssetUrl = assetUrl
}
module.exports = RumGenerator
