'use strict'

const Util = require('./util')
let _tracer
let _shimmer

/**
 * Instrumenter API for customer monkeypatching
 * @param {Tracer} tracer
 * @param {shimmer} shimmer
 */
function Instrumenter (tracer, shimmer) {
  _tracer = tracer
  _shimmer = shimmer
}

/**
 * @see {Tracer.prototype.watch}
 */
Instrumenter.prototype.watch = function watch () {
  return _tracer.watch.apply(_tracer, arguments)
}

/**
 * Wraps and bind function or object properties to preserve state
 * @param {Object|Function} library - Object to wrap against to or an actual callback
 * @param {string|Array?} properties - Array of properties or property string
 *
 * @returns {WrapFunction|Object} returns the wrapped function or the object with wrapped properties
 */
Instrumenter.prototype.wrapAndBindFunction = function wrapAndBindFunction (library, properties) {
  if (properties && !Util.isArray(properties)) {
    if (typeof properties === 'string') {
      properties = [properties]
    } else {
      properties = null
    }
  }

  if (Util.isUndefined(properties) || properties === null) {
    return _shimmer.wrap(library, null, wrapAndBindFunction)
  }

  // Wrap one by one
  properties.forEach(function callbackFn (value, index) {
    _shimmer.wrap(library, value, wrapAndBindFunction)
  })

  return library

  function wrapAndBindFunction (original, name) {
    if (!Util.isFunction(original)) {
      return original
    }

    if (Util.isMonkeyPatched(original)) {
      return original
    }

    return function wrappedAndBoundFunction () {
      return _tracer.bindSpanCallback(original.apply(this, arguments))
    }
  }
}

module.exports = Instrumenter
