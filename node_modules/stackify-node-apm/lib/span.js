'use strict'

const Logger = require('./logger')
const Exception = require('./exception')
const Util = require('./util')

const PENDING = 1 /* eslint-disable-line */
const RUNNING = 2
const STOPPED = 3
/**
 * Model tracking a function call in a transaction
 * @param transaction
 * @param call
 * @constructor
 */
function Span (transaction, call, parentId, isDelay) {
  this._transaction = transaction
  this.call = call
  this.props = {}
  this.reqBegin = null
  this.reqEnd = null
  this.stacks = []
  this.exceptions = []
  this.state = PENDING
  this._parentId = parentId || null
  this._transactionId = transaction && transaction.id && transaction.id()
  this._id = Util.makeId()
  this._namespaceContext = null

  if (!isDelay) {
    this.start()
  }
}

Span.prototype.start = function () {
  if (this.state >= RUNNING) {
    Logger.debug('Span: Span has already started - ' + this.call)
    return
  }
  if (this._transaction && this._transaction._timer) {
    this.reqBegin = this._transaction._timer.getCurrentTime()
    this.state = RUNNING
    Logger.debug('Span: Span has started - ' + this.call)
  }
  Logger.debug('Span: Span call start - ' + this.call + ' - Begin: ' + this.reqBegin + ' - Id: ' + this._id)
}
// FIXME: use touch concept?
Span.prototype.captureTime = function captureTime () {
  this.reqEnd = this._transaction._timer.getCurrentTime()
  Logger.debug('Span: Capture current time - ' + this.reqEnd + ' - ' + this._id + ' - ' + this.call)
  if (this.reqEnd < this.reqBegin) {
    Logger.error('Span: captureTime - span is in illegal state - ' + JSON.stringify({
      transactionId: this._transaction.id(),
      url: this._transaction.rootSpan.props['REPORTING_URL'],
      reqBegin: this.reqBegin,
      reqEnd: this.reqEnd,
      props: this.props,
      timer: this._transaction._timer,
      currentTime: this._transaction._timer.getCurrentTime()
    }))
  }
}

Span.prototype.end = function end () {
  if (this.state === STOPPED) {
    Logger.debug('Span: Span is already stopped - ' + this.call)
  }
  this.reqEnd = this._transaction._timer.getCurrentTime()
  this.state = STOPPED
  Logger.debug('Span: Span has ended - Call: ' + this.call + ' - ' + this.reqEnd + ' - ' + this._id)

  if (this.reqEnd < this.reqBegin) {
    Logger.error('Span: end - span is in illegal state - ' + JSON.stringify({
      transactionId: this._transaction.id(),
      url: this._transaction.rootSpan.props['REPORTING_URL'],
      reqBegin: this.reqBegin,
      reqEnd: this.reqEnd,
      props: this.props,
      timer: this._transaction._timer,
      currentTime: this._transaction._timer.getCurrentTime()
    }))
  }
}

/**
 * Set cls-hooked namespace context
 */
Span.prototype.setNamespaceContext = function setNamespaceContext (namespaceContext) {
  this._namespaceContext = namespaceContext
}

/**
 * Get cls-hooked namespace context
 */
Span.prototype.getNamespaceContext = function getNamespaceContext (namespaceContext) {
  return this._namespaceContext
}

Span.prototype.addChild = function addChild (call, isDelay) {
  const child = new Span(this.getTransaction(), call, this._id, isDelay)

  if (child) {
    // this is a marker for the trace processing signaling
    // that child span's elapsed time may exceed the parent span's elapsed time
    child.addProperty('TRACETYPE', 'ASYNC')
  }

  this.stacks.push(child)

  // Set child namespace context
  child.setNamespaceContext(this.getNamespaceContext())
  return child
}

/**
 * Add property to span
 */
Span.prototype.addProperty = function (key, value) {
  if (key && value) {
    this.props[key] = value
  }
}

/**
 * Get transaction associated with the span
 * @returns Transaction
 */
Span.prototype.getTransaction = function () {
  return this._transaction
}

Span.prototype.setCall = function (call) {
  this.call = call
}

Span.prototype.addException = function (err) {
  if (err) {
    this.exceptions.push(new Exception(err))
  }
}

module.exports = Span
