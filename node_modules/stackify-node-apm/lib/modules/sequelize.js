'use strict'

const Logger = require('../logger')
const Util = require('./../util')
const stringify = require('json-stringify-safe')

/**
 * sequelize module instrumentation
 * https://www.npmjs.com/package/handlebars
 * @param sequelize
 * @param tracer
 * @param shimmer
 * @param version
 */
module.exports = function (sequelize, tracer, shimmer, version) {
  Logger.debug('Sequelize version %s', version)

  shimmer.wrap(sequelize.Model, 'init', wrapInit)

  return sequelize

  /**
   * Wrap sequilize model init method
   * @param original
   */
  function wrapInit (original) {
    return function (attributes, options) {
      let sequelize = options.sequelize

      shimmer.wrap(sequelize.dialect.connectionManager, 'connect', wrapConnect)
      shimmer.wrap(sequelize.dialect.Query.prototype, 'run', wrapRun)

      return original.apply(this, arguments)
    }
  }

  /**
   * Wrap sequelize conenctionManager connect method
   * @param original
   */
  function wrapConnect (original) {
    return function () {
      const span = tracer.createSpan('Sequelize.dialect.connectionManager.connect')
      if (span) {
        span.addProperty('CATEGORY', 'Database')
        span.addProperty('SUBCATEGORY', 'ORM')
        span.addProperty('COMPONENT_CATEGORY', 'Database')
        span.addProperty('COMPONENT_DETAIL', 'Open Connection')
      }

      let result = original.apply(this, arguments)
      if (span) {
        tracer.endSpan(span)
      }
      return result
    }
  }

  /**
   * Wrap sequelize Query run method
   * @param original
   */
  function wrapRun (original) {
    return function (sql, parameters) {
      const span = tracer.createSpan('Sequelize.dialect.Query.run')
      if (span) {
        span.addProperty('CATEGORY', 'Database')
        span.addProperty('SUBCATEGORY', 'ORM')

        if (sql) {
          let sqlStr = Util.truncateSQL(sql, span)
          span.addProperty('SQL', sqlStr)
        }

        let  isPreparedStatement = parameters && parameters.length
        if (tracer.getConfiguration().prefixEnabled && isPreparedStatement) {
          let prepValues = parameters
          let sqlParam = []
          prepValues.forEach(function (val, idx) {
            Util.pushToAryIndex(sqlParam, idx, val.toString().substring(0, 1000))
          })
          span.addProperty('PREFIX_SQL_PARAMETERS', stringify(sqlParam.slice(0, 100)))
          span.addProperty('PREFIX_SQL_PARAMETER_COUNT', sqlParam.length.toString())
        }
      }

      let result = original.apply(this, arguments)
      if (span) {
        tracer.endSpan(span)
      }
      return result
    }
  }
}
