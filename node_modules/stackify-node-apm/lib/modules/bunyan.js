'use strict'

const Logger = require('../logger')
const semver = require('semver')

/**
 * Bunyan Instrumentation
 * https://www.npmjs.com/package/bunyan
 * @param Bunyan
 * @param tracer
 * @param shimmer
 * @param version
 */
module.exports = function (bunyan, tracer, shimmer, version) {
  const LEVELS = {
    10: 'trace',
    20: 'debug',
    30: 'info',
    40: 'warn',
    50: 'error',
    60: 'fatal'
  }

  let bunyanLogging = function (original) {
    return function wrapped () {
      let result = original.apply(this, arguments)
      shimmer.wrap(result, '_emit', function (original) {
        Logger.info('[instrumentation/bunyan1.x] shimming bunyan.%s() function', '_emit')
        return function wrap () {
          let data = original.apply(this, arguments)
          let obj = JSON.parse(data)
          let levelNum = (obj && obj.level) ? obj.level : '-1'
          let msg = (obj && obj.msg) ? obj.msg : ''
          let level = LEVELS.hasOwnProperty(levelNum) ? LEVELS[levelNum] : 'unknown'
          let span = tracer.createSpan('bunyan.' + level)
          if (span) {
            span.addProperty('CATEGORY', 'Log')
            span.addProperty('SUBCATEGORY', 'Bunyan')
            span.addProperty('MESSAGE', msg)
            span.addProperty('LEVEL', level)
            span.addProperty('PREFIX', 'TRUE')
            if (obj && obj.err && obj.err.stack) span.addProperty('EXCEPTION', obj.err.stack)
            tracer.endSpan(span)
          }
        }
      })

      return result
    }
  }

  if (tracer.getConfiguration().prefixEnabled) {
    if (semver.satisfies(version, '>=1.0')) {
      shimmer.wrap(bunyan, 'createLogger', function (original) {
        return bunyanLogging(original)
      })
    } else {
      Logger.debug('bunyan version %s not supported', version)
    }
  }

  return bunyan
}
