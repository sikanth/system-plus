'use strict'

const Logger = require('../logger')
const semver = require('semver')
const Util = require('../util')

/**
 * Winston Instrumentation
 * https://www.npmjs.com/package/winston
 * @param Winston
 * @param tracer
 * @param shimmer
 * @param version
 */
module.exports = function (winston, tracer, shimmer, version) {
  const LEVELS = ['error', 'warn', 'info', 'http', 'verbose', 'debug', 'silly']

  let winstonLogging = function wrapped (original, lvl, v) {
    return function wrapped () {
      let result = original.apply(this, arguments)
      let args = Util.argsToArray.apply(this, arguments)
      let level = lvl || args[0]
      let msgs
      switch (v) {
        case '3.x':
          msgs = args[0]
          break
        case '2.x':
          msgs = args[1]
          break
      }
      let msg = (msgs && (typeof (msgs) === 'object') && msgs.message) ? msgs.message : msgs
      let span = tracer.createSpan('winston.' + level)
      if (span) {
        span.addProperty('CATEGORY', 'Log')
        span.addProperty('SUBCATEGORY', 'Winston')
        span.addProperty('MESSAGE', msg)
        span.addProperty('LEVEL', level)
        span.addProperty('PREFIX', 'TRUE')
        if (msgs && msgs.stack) span.addProperty('EXCEPTION', msgs.stack)
        tracer.endSpan(span)
      }

      return result
    }
  }

  if (tracer.getConfiguration().prefixEnabled) {
    if (semver.satisfies(version, '>=3.0')) {
      LEVELS.forEach(function (level) {
        Logger.info('[instrumentation/winston3.x] shimming winston.%s() function', level)
        shimmer.wrap(winston, level, function (original) {
          return winstonLogging(original, level, '3.x')
        })
      })
    } else if (semver.satisfies(version, '>=2.0')) {
      /**
       * Winston 2.x custom logging level is supported. For example: winston.foobar('message)
       */
      Logger.info('[instrumentation/winston2.x] shimming winston.log() function')
      shimmer.wrap(winston && winston.Logger.prototype, 'log', function (original) {
        return winstonLogging(original, null, '2.x')
      })
    } else {
      Logger.debug('winston version %s not supported', version)
    }
  }

  return winston
}
