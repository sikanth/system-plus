'use strict'

const https = require('https')
const AgentBase = require('./agent-base')
const Config = require('../config')
const Logger = require('./../logger')
const retry = require('retry')

/**
 * This class will handle the sending of protobuf messages through HTTP.
 * @constructor
 */
function AgentHTTPClient () {
  // Call the parent constructor
  AgentBase.call(this)
  this._config = new Config()
  this.transactions = null
}

/**
 * This function is responsible in sending of protobuf messages through HTTP.
 * @constructor
 */
AgentHTTPClient.prototype.post = function (transactions, cb) {
  try {
    var operation = retry.operation({ retries: this._config.getMaxRetries(), minTimeout: this._config.getDelaySeconds() })
    this.transactions = transactions
    var protobufObj = AgentBase.prototype.build_message(transactions)
    // Convert message into binary and send it to http request. Serializes to a UInt8Array.
    var serialized = protobufObj.serializeBinary()

    var callback = function callback (res) {
      if (res.statusCode === 200) {
        Logger.debug(`AgentHTTPClient.post - Successfully sent via http request. StatusCode: ${res.statusCode} StatusMsg: ${res.statusMessage}`)
        cb(null, { 'success': true, 'statusCode': 200 })
      } else {
        Logger.debug(`AgentHTTPClient.post - Failed sending via http request. StatusCode: ${res.statusCode} StatusMsg: ${res.statusMessage} `)
        let error = { 'success': false, 'statusCode': res.statusCode, 'message': res.statusMessage }
        cb(error)
      }
    }

    var options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-protobuf'
      },
      host: this._config.transport_http_hostname,
      port: this._config.transport_http_port,
      path: this._config.agent_traces_url,
      rejectUnauthorized: false
    }

    operation.attempt(function (currentAttempt) {
      var client = https.request(options, callback)
      /* set timeout of 5 seconds on request */
      client.on('socket', function (socket) {
        socket.setTimeout(5000)
        socket.on('timeout', function () {
          client.abort()
        })
      })
      client.on('error', function (err) {
        Logger.debug('AgentHTTPClient.post clientError: ' + err)
        return operation.retry(err)
      })
      process.on('uncaughtException', function (err) {
        Logger.debug('AgentHTTPClient.post uncaughtException:' + err)
        return operation.retry(err)
      })
      /* Convert data into binary Buffer */
      var data = Buffer.from(serialized, 'utf8')
      client.write(data)
      client.end()
    })
  } catch (error) {
    Logger.debug('AgentHTTPClient.post error:' + error)
  }
}

/** @class AgentHTTPClient */
module.exports = AgentHTTPClient
