'use strict'

const os = require('os')
const path = require('path')
const process = require('process')
const URL = require('url')

const _traceSource = 'NODEJS'
const _traceTarget = 'RETRACE'
const _traceVersion = '2.0'
const _hostname = os.hostname()
const _osType = os.type()

/**
 * Handles formatting of transaction objects prior to submitting to Agent.
 * @constructor
 */
function TraceFormatter () {
}

/**
 * Process and format transaction.
 * @param transaction
 * @returns JSON trace
 */
TraceFormatter.prototype.formatTransaction = function (transaction, nonStringify) {
  this._processSpan(transaction.rootSpan)
  if (nonStringify) {
    return transaction.rootSpan
  } else {
    return this.stringify(transaction.rootSpan)
  }
}

/**
 * Stringify rootSpan
 */
TraceFormatter.prototype.stringify = function (rootSpan) {
  // exclude any private members
  function replacer (key, value) {
    if (key && key.startsWith('_')) {
      return undefined
    } else {
      return value
    }
  }
  return JSON.stringify(rootSpan, replacer)
}
/**
 * Processing for span and all children spans; adds in missing properties.
 * @param span
 * @private
 */
TraceFormatter.prototype._processSpan = function (span) {
  let appPath = '/'
  let defaultTraceType = 'WEBAPP'
  let reportingURL = null
  if (span) {
    if (span === span.getTransaction().rootSpan) {
      // determine REPORTING_URL if not present
      if (!span.props['REPORTING_URL']) {
        if (span.props['URL']) {
          const url = URL.parse(span.props['URL'])
          if (url) {
            reportingURL = url.pathname
          }
        }
        if (!reportingURL || reportingURL === '') {
          reportingURL = '/'
        }
        span.addProperty('REPORTING_URL', reportingURL)
      }
      if (span.getTransaction().getConfiguration().rumEnabled) {
        span.addProperty('RUM', true)
      }
      span.addProperty('APPLICATION_PATH', appPath)
      span.addProperty('REPORTING_URL', (span.props['REPORTING_URL'] ? span.props['REPORTING_URL'] : reportingURL))
      span.addProperty('APPLICATION_FILESYSTEM_PATH', path.dirname(require.main.filename))
      span.addProperty('APPLICATION_NAME', span.getTransaction().getConfiguration().applicationName)
      span.addProperty('APPLICATION_ENV', span.getTransaction().getConfiguration().environmentName)
      span.addProperty('THREADID', process.pid)
      span.addProperty('TRACETYPE', (span.props['TRACETYPE']) ? span.props['TRACETYPE'] : defaultTraceType)
      span.addProperty('TRACE_ID', span.getTransaction().id())
      span.addProperty('TRACE_SOURCE', _traceSource)
      span.addProperty('TRACE_TARGET', _traceTarget)
      span.addProperty('HOST_NAME', _hostname)
      span.addProperty('OS_TYPE', _osType)
      span.addProperty('PROCESS_ID', process.pid)
      span.addProperty('TRACE_VERSION', _traceVersion)
    }

    // process children
    if (span.stacks) {
      for (let i = 0; i < span.stacks.length; i++) {
        let currentSpan = span.stacks[i]
        if (
          currentSpan.reqEnd === null ||
          currentSpan.reqBegin === null
        ) {
          span.stacks.splice(i, 1) // Remove from array
          continue // Do not process the span further remove it
        }
        this._processSpan(span.stacks[i])
      }
    }
  }
}

module.exports = TraceFormatter
