'use strict'

const TraceLogger = require('./trace-logger')
const AgentHTTPClient = require('./agent-http-client')
const AgentSocket = require('./agent-socket')
const AwsLambdaLogging = require('./aws-lambda-logging')
const TraceFormatter = require('./formatter')
const Config = require('../config')
const Logger = require('./../logger')

/**
 * Handles processing of ended transactions
 * @constructor
 */
function TraceProcessor () {
  this._traceFormatter = new TraceFormatter()
  this._traceLogger = new TraceLogger()
  this._agentHTTPClient = new AgentHTTPClient()
  this._agentSocket = new AgentSocket()
  this._awsLambdaLogging = new AwsLambdaLogging()
}

/**
 * Process ended transactions (formatting/logging) - synchronously
 * @param transactions
 */
TraceProcessor.prototype.process = function (transactions, type) {
  Logger.debug('TraceProcessor.process Transport type: ' + type)
  var self = this
  this._config = new Config()

  if (type === 'log') {
    for (let i = 0; i < transactions.length; i++) {
      let transaction = transactions[i]
      if (!transaction.isLoggedState()) {
        let data = this._traceFormatter.formatTransaction(transaction)
        this._traceLogger.log(data)
        transaction.setStateLogged() // Add transaction as logged
      }
    }
  } else if (type === 'agent_http') {
    self._agentHTTPClient.post(transactions, function (err, result) {
      if (err) {
        var errMessage = 'AgentHTTPClient.post - Sending failed:' + JSON.stringify(err, null, 2)
        Logger.debug('TraceProcessor.process uncaughtException:' + errMessage)
        throw new Error(err) // Error still thrown after retrying N times, so rethrow.
      }
      if (result) {
        Logger.debug('TraceProcessor.process AgentHTTPClient result: ' + JSON.stringify(result))
      } else {
        Logger.debug('TraceProcessor.process AgentHTTPClient result: ' + JSON.stringify(err))
      }
    })
  } else if (type === 'agent_socket') {
    self._agentSocket.send(transactions, function (err, result) {
      if (err) {
        var errMessage = 'AgentSocket.send - Sending failed:' + JSON.stringify(err, null, 2)
        Logger.debug('TraceProcessor.process uncaughtException:' + errMessage)
        throw new Error(err) // Error still thrown after retrying N times, so rethrow.
      }
    })
  } else if (type === 'logging') {
    for (let i = 0; i < transactions.length; i++) {
      let transaction = transactions[i]
      if (!transaction.isLoggedState()) {
        let data = this._traceFormatter.formatTransaction(transaction)
        this._awsLambdaLogging.log(data)
        transaction.setStateLogged() // Add transaction as logged
      }
    }
  }
}

module.exports = TraceProcessor
