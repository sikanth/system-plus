'use strict'

const os = require('os')
const moment = require('moment')
const rfs = require('../dependencies/rfs')
const Logger = require('./../logger')
const fs = require('fs')
const common = require('./../common')
const mkdirp = require('mkdirp')
const glob = require('glob')
const _baseFilename = os.hostname() + '#' + process.pid

/**
 * Handles writing traces to disk
 * @class
 */
function TraceLogger (baseFilename, logExtension) {
  this._directory = common.LOG_TRACES_DIR
  this._folderCreated = null
  this._folderCreationError = null
  this._logBuffer = []
  this._streamError = null
  this._baseFilename = baseFilename || _baseFilename
  this._logExtension = logExtension || '.log'

  try {
    process.umask(0)
    if (!fs.existsSync(this._directory)) {
      this._folderCreated = false
      Logger.debug('TraceLogger.constructor - Log folder doest not exists! - Directory: %s', this._directory)
      this.makeLogDirectory()
    }

    let lastIndex = this.getFileLastIndex(this._baseFilename, this._directory)
    this.initLogStream(lastIndex)
  } catch (err) {
    Logger.error('TraceLogger.constructor - Log rotating file stream error - Directory: %s - Error: %s', this._directory, err.message)
  }
}

/**
 * Make Log directory folder
 */
TraceLogger.prototype.makeLogDirectory = function makeLogDirectory () {
  try {
    if (!this._directory) {
      Logger.error('TraceLogger.makeLogDirectory - Log folder is invalid.')
      return
    }
    mkdirp.sync(this._directory, {
      mode: 0o777
    })
    this._folderCreated = true
  } catch (err) {
    this._folderCreationError = err
    if (err.code === 'EACCES') {
      Logger.error('TraceLogger.makeLogDirectory - Log folder creation error - Permission denied - Directory: %s - Error: %s', this._directory, err.message)
      return
    }
    Logger.error('TraceLogger.makeLogDirectory - Log folder creation error - Directory: %s - Error: %s', this._directory, err.message)
  }
}

/**
 * Check if folder is created
 */
TraceLogger.prototype.isFolderCreated = function isFolderCreated () {
  return this._folderCreated
}

/**
 * Get folder creation error
 */
TraceLogger.prototype.getFolderCreationError = function getFolderCreationError () {
  return this._folderCreationError
}

/**
 * Get last file index
 * @returns {Number}
 */
TraceLogger.prototype.getFileLastIndex = function getFileLastIndex (baseFilename, directory) {
  let files = glob.sync(baseFilename + '?(-[0-9]*)' + this._logExtension, {
    cwd: directory
  })

  let regEx = new RegExp(baseFilename + '(-(\\d+)|^$)?' + this._logExtension) //eslint-disable-line
  let fileIndexes = files.map(function (value, index) {
    let result = regEx.exec(value)
    if (!result || (result && !result.length)) {
      return 0
    }

    let matchValue = result[2]
    if (!matchValue) {
      return 0
    }

    return matchValue
  }).sort(function sortDesc (a, b) {
    return b - a
  })

  if (!fileIndexes || (fileIndexes && !fileIndexes.length)) {
    return 0
  }

  let lastIndex = parseInt(fileIndexes[0])

  // To avoid negative value
  // Start from 1
  if (lastIndex === 0) {
    return 0
  }

  // Subtract by 1 since its incremented before returning
  return lastIndex - 1
}

/**
 * Load log rotating file stream
 */
TraceLogger.prototype.initLogStream = function initLogStream (lastIndex) {
  if (this._stream) {
    Logger.error('TraceLogger.initLogStream - Error: TraceLogger _stream is already set')
    return
  }

  if (!this._directory) {
    Logger.error('TraceLogger.initLogStream - Error: TraceLogger _directory is invalid')
    return
  }

  let self = this

  function makeGenerator (lastIndex) {
    let logIndex = lastIndex || -1
    return function generator (time, index) {
      logIndex++
      return self._baseFilename + '-' + logIndex + '' + self._logExtension
    }
  }

  try {
    this._stream = rfs.createStream(makeGenerator(lastIndex), {
      size: '50M',
      interval: '1d',
      immutable: true,
      path: this._directory,
      mode: 0o777
    })

    this._stream.on('error', function (err) {
      Logger.error('[Stackify Node APM] TraceLogger.initLogStream - TraceLogger._stream::on(error) - %s', err)
      self._stream = null // set _stream to null as its already dead
      self._streamError = err // Set stream error to avoid filling up the log buffer
      self._logBuffer = [] // clear the log buffer as its pointless to store nenw logs
    })

    this._stream.on('warning', function (err) {
      Logger.warn('[Stackify Node APM] TraceLogger.initLogStream - TraceLogger._stream::on(warning) - %s', err)
    })
  } catch (error) {
    console.log('[Stackify Node APM] TraceLogger._stream exception: ', error)
  }
}

/**
 * Save trace content to disk - synchronously
 * @param content
 */
TraceLogger.prototype.log = function (content) {
  // Get the current time and format it for placeholder prefix
  let prefix = moment.utc().format('YYYY-MM-DD, HH:mm:ss.SSSSSS> ')
  this.writeOnBuffer(prefix + content + '\n')

  Logger.debug('TraceLogger.log - Log content')
  Logger.debug(content)
}

/**
 * Write on log buffer
 */
TraceLogger.prototype.writeOnBuffer = function (msg) {
  if (this._stream && this._stream.stream && this._stream.stream.writable) {
    this.flushBuffer()
    this._stream.write(msg)
    return
  }

  if (this._streamError === null) {
    this._logBuffer.push(msg)
  }
}

/**
 * Flush log buffer on RFS stream
 */
TraceLogger.prototype.flushBuffer = function () {
  if (this._logBuffer.length) {
    let self = this
    this._logBuffer.forEach(function (value, index) {
      self._stream.write(value)
    })
    this._logBuffer = []
  }
}
/** @class TraceLogger */
module.exports = TraceLogger
