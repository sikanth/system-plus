'use strict'

const Span = require('./span')
const Util = require('./util')
const Timer = require('./timer')

const RUNNING = 1
const END = 2 // eslint-disable-line
const PENDING_WAIT_SPAN = 3 // eslint-disable-line
const PENDING_LOG = 4 // eslint-disable-line
const LOGGED = 5 // eslint-disable-line

/**
 * Model for handling a request transaction
 * @param call initiating function call for transaction
 * @param config
 * @constructor
 */
function Transaction (call, config) {
  this._timer = new Timer()
  this._id = Util.makeId()
  this._config = config
  this.rootSpan = new Span(this, call)
  this.rootSpan.addProperty('PROFILER_VERSION', require('../package.json').version)
  this.rootSpan.addProperty('CATEGORY', 'NodeJS')
  this._state = RUNNING
}

Transaction.prototype.getConfiguration = function getConfiguration () {
  return this._config
}

Transaction.prototype.id = function id () {
  return this._id
}

Transaction.prototype.addException = function addException (err) { // eslint-disable-line handle-callback-err
  if (this.rootSpan) {
    this.rootSpan.addException(err)
  }
}

Transaction.prototype.setStateEnd = function setStateEnd () {
  this._state = END
}

Transaction.prototype.setStatePendingWaitSpan = function setStatePendingWaitSpan () {
  this._state = PENDING_WAIT_SPAN
}

Transaction.prototype.setStatePendingLog = function setStatePendingLog () {
  this._state = PENDING_LOG
}

Transaction.prototype.setStateLogged = function setStateLogged () {
  this._state = LOGGED
}

/**
 * Checks if a certain transaction has already ended explicitly
 * @returns {boolean}
 */
Transaction.prototype.isEndState = function isEndState () {
  return this._state >= END
}

/**
 * Checks if a certain transaction has been already logged
 * @returns {boolean}
 */
Transaction.prototype.isLoggedState = function isLoggedState () {
  return this._state >= LOGGED
}

/**
 * Checks if a certain transaction has been already added in log queue
 * @returns {boolean}
 */
Transaction.prototype.isPendingLogState = function isPendingLogState () {
  return this._state >= PENDING_LOG
}

/**
 * Checks if a certain transaction has been already added in wait span queue
 * @returns {boolean}
 */
Transaction.prototype.isPendingWaitSpanState = function isPendingWaitSpanState () {
  return this._state >= PENDING_WAIT_SPAN
}

// State Transition - RUNNING -> END -> PENDING_WAIT_SPAN -> PENDING_LOG -> LOGGED

module.exports = Transaction
